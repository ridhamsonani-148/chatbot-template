version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
      python: 3.11
    commands:
      - echo "Installing AWS CDK CLI..."
      - npm install -g aws-cdk@2.161.1
      - echo "Current directory:"
      - pwd
      - echo "Listing root directory:"
      - ls -la
      - echo "Changing into Backend directory"
      - cd Backend
      - echo "Installing dependencies..."
      - npm install

  pre_build:
    commands:
      - echo "Building TypeScript sources..."
      - npm run build
      - echo "Bootstrapping CDK..."
      - cdk bootstrap --require-approval never

  build:
    commands:
      - |
        if [ "$ACTION" = "destroy" ]; then
          echo "Destroying CDK stack..."
          cdk destroy CatholicCharitiesStack --force \
            --context githubOwner="$GITHUB_OWNER" \
            --context githubRepo="$GITHUB_REPO" \
            --context githubToken="$GITHUB_TOKEN" \
            --context projectName="$PROJECT_NAME" \
            --context urlFilesPath="$URL_FILES_PATH" \
            --context identityCenterInstanceArn="$IDENTITY_CENTER_INSTANCE_ARN"
        else
          echo "=== PHASE 1: Backend Deployment ==="
          echo "Deploying backend infrastructure..."
          echo "URL files found in $URL_FILES_PATH:"
          ls -la "$URL_FILES_PATH"/*.txt || echo "No .txt files found in $URL_FILES_PATH"
          
          cdk deploy CatholicCharitiesStack --require-approval never \
            --context githubOwner="$GITHUB_OWNER" \
            --context githubRepo="$GITHUB_REPO" \
            --context githubToken="$GITHUB_TOKEN" \
            --context projectName="$PROJECT_NAME" \
            --context urlFilesPath="$URL_FILES_PATH" \
            --context identityCenterInstanceArn="$IDENTITY_CENTER_INSTANCE_ARN" \
            --outputs-file outputs.json
          
          echo "Backend deployment outputs:"
          cat outputs.json
          
          API_URL=$(cat outputs.json | jq -r '.CatholicCharitiesStack.APIGatewayURL // empty')
          FRONTEND_BUILD_BUCKET=$(cat outputs.json | jq -r '.CatholicCharitiesStack.FrontendBuildBucketName // empty')
          AMPLIFY_DEPLOYMENT_LAMBDA=$(cat outputs.json | jq -r '.CatholicCharitiesStack.AmplifyDeploymentLambdaARN // empty')
          
          if [ -z "$API_URL" ] || [ -z "$FRONTEND_BUILD_BUCKET" ] || [ -z "$AMPLIFY_DEPLOYMENT_LAMBDA" ]; then
            echo "Error: Could not extract required outputs from CDK deployment"
            echo "API_URL: $API_URL"
            echo "FRONTEND_BUILD_BUCKET: $FRONTEND_BUILD_BUCKET"
            echo "AMPLIFY_DEPLOYMENT_LAMBDA: $AMPLIFY_DEPLOYMENT_LAMBDA"
            echo "Available outputs:"
            cat outputs.json | jq '.CatholicCharitiesStack | keys'
            exit 1
          fi
          
          echo "‚úÖ Backend deployment completed successfully"
          echo "API Gateway URL: $API_URL"
          echo "Frontend Build Bucket: $FRONTEND_BUILD_BUCKET"
          
          echo "=== PHASE 2: Testing API Endpoints ==="
          echo "Testing health endpoint..."
          HEALTH_URL="${API_URL}health"
          echo "Health endpoint: $HEALTH_URL"
          
          HEALTH_RESPONSE=$(curl -s -w "%{http_code}" "$HEALTH_URL" || echo "000")
          echo "Health check response: $HEALTH_RESPONSE"
          
          if echo "$HEALTH_RESPONSE" | grep -q "200"; then
            echo "‚úÖ API Gateway health check passed"
          else
            echo "‚ö†Ô∏è API Gateway health check failed"
            echo "Response: $HEALTH_RESPONSE"
          fi
          
          echo "=== PHASE 3: Triggering Data Source Sync ==="
          echo "Starting Q Business data source sync jobs..."
          
          # Extract data source info
          DATA_SOURCE_INFO=$(cat outputs.json | jq -r '.CatholicCharitiesStack.DataSourceInfo')
          APPLICATION_ID=$(cat outputs.json | jq -r '.CatholicCharitiesStack.QBusinessApplicationId')
          INDEX_ID=$(cat outputs.json | jq -r '.CatholicCharitiesStack.QBusinessIndexId')
          
          echo "Data sources: $DATA_SOURCE_INFO"
          echo "Application ID: $APPLICATION_ID"
          echo "Index ID: $INDEX_ID"
          
          # Parse data sources and trigger sync for each
          echo "$DATA_SOURCE_INFO" | jq -r '.[] | @base64' | while read -r data_source; do
            DS_ID=$(echo "$data_source" | base64 -d | jq -r '.id')
            DS_NAME=$(echo "$data_source" | base64 -d | jq -r '.name')
            
            echo "Starting sync for data source: $DS_NAME (ID: $DS_ID)"
            
            aws qbusiness start-data-source-sync-job \
              --application-id "$APPLICATION_ID" \
              --data-source-id "$DS_ID" \
              --index-id "$INDEX_ID" \
              --region "$CDK_DEFAULT_REGION" || echo "Sync job may already be running for $DS_NAME"
          done
          
          echo "=== PHASE 4: Frontend Build ==="
          echo "Building frontend application..."
          cd ../Frontend
          
          echo "REACT_APP_API_BASE_URL=$API_URL" > .env
          echo "REACT_APP_CHAT_ENDPOINT=${API_URL}chat" >> .env
          echo "REACT_APP_HEALTH_ENDPOINT=${API_URL}health" >> .env
          
          echo "Frontend environment variables:"
          cat .env
          
          echo "Installing frontend dependencies..."
          npm ci
          
          echo "Building frontend application..."
          npm run build
          
          echo "Frontend build completed successfully"
          ls -la build/
          
          echo "=== PHASE 5: Creating Build Artifact ==="
          echo "Creating build.zip artifact..."
          cd build
          zip -r ../build.zip . -x "*.DS_Store*" "*.git*"
          cd ..
          
          BUILD_KEY="builds/build-$(date +%s).zip"
          echo "Uploading build artifact to s3://$FRONTEND_BUILD_BUCKET/$BUILD_KEY"
          aws s3 cp build.zip s3://$FRONTEND_BUILD_BUCKET/$BUILD_KEY
          
          echo "‚úÖ Build artifact uploaded successfully"
          
          echo "=== PHASE 6: Amplify App Deployment ==="
          echo "Deploying frontend to Amplify using build artifact..."
          
          # Extract function name from ARN
          LAMBDA_FUNCTION_NAME=$(echo "$AMPLIFY_DEPLOYMENT_LAMBDA" | awk -F: '{print $7}')
          
          LAMBDA_PAYLOAD=$(cat <<EOF
        {
          "RequestType": "Create",
          "ResponseURL": "https://httpbin.org/put",
          "StackId": "arn:aws:cloudformation:$CDK_DEFAULT_REGION:123456789012:stack/test/test",
          "RequestId": "test-request-id",
          "LogicalResourceId": "AmplifyDeployment",
          "ResourceProperties": {
            "ProjectName": "$PROJECT_NAME",
            "ApiUrl": "$API_URL",
            "BuildBucket": "$FRONTEND_BUILD_BUCKET",
            "BuildKey": "$BUILD_KEY"
          }
        }
        EOF
          )
          
          echo "Invoking Amplify deployment Lambda: $LAMBDA_FUNCTION_NAME"
          LAMBDA_RESPONSE=$(aws lambda invoke \
            --function-name "$LAMBDA_FUNCTION_NAME" \
            --payload "$LAMBDA_PAYLOAD" \
            --cli-binary-format raw-in-base64-out \
            response.json)
          
          echo "Lambda invocation response:"
          echo "$LAMBDA_RESPONSE"
          
          if [ -f response.json ]; then
            echo "Lambda function response:"
            cat response.json
            
            AMPLIFY_APP_ID=$(cat response.json | jq -r '.AppId // empty')
            AMPLIFY_APP_URL=$(cat response.json | jq -r '.AppUrl // empty')
            DEPLOYMENT_STATUS=$(cat response.json | jq -r '.DeploymentStatus // empty')
            
            if [ -n "$AMPLIFY_APP_ID" ] && [ -n "$AMPLIFY_APP_URL" ]; then
              echo "‚úÖ Amplify deployment completed"
              echo "Amplify App ID: $AMPLIFY_APP_ID"
              echo "Amplify App URL: $AMPLIFY_APP_URL"
              echo "Deployment Status: $DEPLOYMENT_STATUS"
              
              echo "{" > final_outputs.json
              echo "  \"BackendApiUrl\": \"$API_URL\"," >> final_outputs.json
              echo "  \"FrontendUrl\": \"$AMPLIFY_APP_URL\"," >> final_outputs.json
              echo "  \"AmplifyAppId\": \"$AMPLIFY_APP_ID\"," >> final_outputs.json
              echo "  \"DeploymentStatus\": \"$DEPLOYMENT_STATUS\"," >> final_outputs.json
              echo "  \"HealthEndpoint\": \"${API_URL}health\"," >> final_outputs.json
              echo "  \"ChatEndpoint\": \"${API_URL}chat\"" >> final_outputs.json
              echo "}" >> final_outputs.json
            else
              echo "‚ö†Ô∏è Amplify deployment may have issues, but continuing..."
            fi
          else
            echo "‚ö†Ô∏è No response file from Lambda invocation"
          fi
          
          echo "=== PHASE 7: Final API Testing ==="
          echo "Testing chat endpoint with sample request..."
          
          CHAT_URL="${API_URL}chat"
          echo "Chat endpoint: $CHAT_URL"
          
          # Test chat endpoint with a simple message
          CHAT_TEST_RESPONSE=$(curl -s -w "%{http_code}" -X POST "$CHAT_URL" \
            -H "Content-Type: application/json" \
            -d '{"message": "Hello, what services does Catholic Charities offer?"}' || echo "000")
          
          echo "Chat endpoint test response: $CHAT_TEST_RESPONSE"
          
          if echo "$CHAT_TEST_RESPONSE" | grep -q "200"; then
            echo "‚úÖ Chat API endpoint is working"
          else
            echo "‚ö†Ô∏è Chat API endpoint test failed (this is normal if data sync is still in progress)"
          fi
          
          rm -f build.zip response.json
          
          cd ../Backend
        fi

  post_build:
    commands:
      - echo "=== Deployment Complete ==="
      - |
        if [ "$ACTION" = "deploy" ]; then
          echo "üéâ Full-Stack Deployment Summary:"
          echo ""
          echo "‚úÖ Q Business Application deployed with web crawler"
          echo "‚úÖ Q Business Index and Retriever created"
          echo "‚úÖ Data source sync jobs triggered"
          echo "‚úÖ Lambda function deployed for chat API"
          echo "‚úÖ API Gateway deployed with CORS enabled"
          echo "‚úÖ Frontend built with production configuration"
          echo "‚úÖ Amplify app deployment initiated"
          echo ""
          
          if [ -f ../Frontend/final_outputs.json ]; then
            echo "üîó Application URLs:"
            cat ../Frontend/final_outputs.json | jq -r '"Backend API: " + .BackendApiUrl'
            cat ../Frontend/final_outputs.json | jq -r '"Frontend App: " + .FrontendUrl'
            cat ../Frontend/final_outputs.json | jq -r '"Health Check: " + .HealthEndpoint'
            cat ../Frontend/final_outputs.json | jq -r '"Chat API: " + .ChatEndpoint'
            echo ""
          fi
          
          echo "üìä Next Steps:"
          echo "1. Monitor Q Business data source sync (10-30 minutes)"
          echo "2. Test the health endpoint: https://xfr9e0nc6k.execute-api.us-west-2.amazonaws.com/prod/health"
          echo "3. Test the chat endpoint: https://xfr9e0nc6k.execute-api.us-west-2.amazonaws.com/prod/chat"
          echo "4. Access your application via the Frontend URL"
          echo ""
          echo "üîç Monitoring:"
          echo "- Q Business Console: Check data source sync status"
          echo "- CloudWatch Logs: Monitor Lambda function logs"
          echo "- Amplify Console: View deployment status and logs"
          echo ""
          echo "‚ö° The chatbot will be fully functional once data source sync completes!"
          echo ""
          echo "üß™ API Testing Commands:"
          echo "# Health check:"
          echo "curl https://xfr9e0nc6k.execute-api.us-west-2.amazonaws.com/prod/health"
          echo ""
          echo "# Chat test:"
          echo 'curl -X POST https://xfr9e0nc6k.execute-api.us-west-2.amazonaws.com/prod/chat \'
          echo '  -H "Content-Type: application/json" \'
          echo '  -d '"'"'{"message": "What services does Catholic Charities offer?"}'"'"
        fi

artifacts:
  files:
    - '**/*'
  base-directory: 'cdk.out'
