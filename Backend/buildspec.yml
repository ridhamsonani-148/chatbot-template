version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
      python: 3.11
    commands:
      - echo "Installing AWS CDK CLI..."
      - npm install -g aws-cdk@2.161.1
      - cd Backend
      - npm install

  pre_build:
    commands:
      - npm run build
      - cdk bootstrap --require-approval never

  build:
    commands:
      - |
        if [ "$ACTION" = "destroy" ]; then
          cdk destroy CatholicCharitiesStack --force \
            --context githubOwner="$GITHUB_OWNER" \
            --context githubRepo="$GITHUB_REPO" \
            --context githubToken="$GITHUB_TOKEN" \
            --context projectName="$PROJECT_NAME" \
            --context urlFilesPath="$URL_FILES_PATH" \
            --context identityCenterInstanceArn="$IDENTITY_CENTER_INSTANCE_ARN"
        else
          echo "=== PHASE 1: Backend Deployment ==="
          cdk deploy CatholicCharitiesStack --require-approval never \
            --context githubOwner="$GITHUB_OWNER" \
            --context githubRepo="$GITHUB_REPO" \
            --context githubToken="$GITHUB_TOKEN" \
            --context projectName="$PROJECT_NAME" \
            --context urlFilesPath="$URL_FILES_PATH" \
            --context identityCenterInstanceArn="$IDENTITY_CENTER_INSTANCE_ARN" \
            --outputs-file outputs.json
          
          API_URL=$(cat outputs.json | jq -r '.CatholicCharitiesStack.APIGatewayURL // empty')
          FRONTEND_BUILD_BUCKET=$(cat outputs.json | jq -r '.CatholicCharitiesStack.FrontendBuildBucketName // empty')
          AMPLIFY_APP_ID=$(cat outputs.json | jq -r '.CatholicCharitiesStack.AmplifyAppId // empty')
          
          if [ -z "$API_URL" ] || [ -z "$FRONTEND_BUILD_BUCKET" ] || [ -z "$AMPLIFY_APP_ID" ]; then
            echo "Error: Could not extract required outputs from CDK deployment"
            exit 1
          fi
          
          echo "=== PHASE 2: Testing API Endpoints ==="
          HEALTH_RESPONSE=$(curl -s -w "%{http_code}" "${API_URL}health" || echo "000")
          if echo "$HEALTH_RESPONSE" | grep -q "200"; then
            echo "‚úÖ API Gateway health check passed"
          else
            echo "‚ö†Ô∏è API Gateway health check failed"
          fi
          
          echo "=== PHASE 3: Triggering Data Source Sync ==="
          DATA_SOURCE_INFO=$(cat outputs.json | jq -r '.CatholicCharitiesStack.DataSourceInfo')
          APPLICATION_ID=$(cat outputs.json | jq -r '.CatholicCharitiesStack.QBusinessApplicationId')
          INDEX_ID=$(cat outputs.json | jq -r '.CatholicCharitiesStack.QBusinessIndexId')
          
          echo "$DATA_SOURCE_INFO" | jq -r '.[] | @base64' | while read -r data_source; do
            DS_ID=$(echo "$data_source" | base64 -d | jq -r '.id')
            DS_NAME=$(echo "$data_source" | base64 -d | jq -r '.name')
            aws qbusiness start-data-source-sync-job \
              --application-id "$APPLICATION_ID" \
              --data-source-id "$DS_ID" \
              --index-id "$INDEX_ID" \
              --region "$CDK_DEFAULT_REGION" || echo "Sync job may already be running for $DS_NAME"
          done
          
          echo "=== PHASE 4: Frontend Build and Automated Deployment ==="
          cd ../Frontend
          
          # CRITICAL: Set PUBLIC_URL to empty string for root deployment
          export PUBLIC_URL=""
          export GENERATE_SOURCEMAP=false
          
          # Create environment file
          echo "REACT_APP_API_BASE_URL=$API_URL" > .env.production
          echo "REACT_APP_CHAT_ENDPOINT=${API_URL}chat" >> .env.production
          echo "REACT_APP_HEALTH_ENDPOINT=${API_URL}health" >> .env.production
          echo "PUBLIC_URL=" >> .env.production
          echo "GENERATE_SOURCEMAP=false" >> .env.production
          
          # Clean previous builds
          rm -rf build/
          rm -rf node_modules/.cache/
          
          # Install dependencies and build
          npm ci --production=false
          npm run build
          
          # Verify build was successful
          if [ ! -f "build/index.html" ]; then
            echo "‚ùå ERROR: Build failed - index.html not found!"
            exit 1
          fi
          
          # Check if static files exist
          if [ ! -d "build/static" ]; then
            echo "‚ùå ERROR: Build failed - static directory not found!"
            exit 1
          fi
          
          # Verify index.html contains proper script tags (not %PUBLIC_URL%)
          if grep -q "%PUBLIC_URL%" build/index.html; then
            echo "‚ùå ERROR: Build incomplete - %PUBLIC_URL% not replaced!"
            cat build/index.html
            exit 1
          fi
          
          echo "=== Build Directory Contents ==="
          ls -la build/
          echo "=== Static Directory Contents ==="
          ls -la build/static/
          echo "=== Index.html Preview ==="
          head -20 build/index.html
          
          # Create build artifact
          cd build
          zip -r ../build.zip . -x "*.DS_Store" "*.map"
          cd ..
          
          # Verify zip contents
          echo "=== Build.zip Contents ==="
          unzip -l build.zip | head -20
          
          # Upload to S3
          BUILD_KEY="builds/build-$(date +%s).zip"
          aws s3 cp build.zip s3://$FRONTEND_BUILD_BUCKET/$BUILD_KEY
          
          echo "‚úÖ Build artifact uploaded to S3. Amplify deployment will start automatically."
          echo "üì± Amplify App URL: https://main.$AMPLIFY_APP_ID.amplifyapp.com"
          
          # Wait for deployment to start
          sleep 30
          
          # Check deployment status
          echo "=== Checking Amplify Deployment Status ==="
          aws amplify list-jobs --app-id "$AMPLIFY_APP_ID" --branch-name main --max-results 1
          
          echo "=== PHASE 5: Final API Testing ==="
          CHAT_TEST_RESPONSE=$(curl -s -w "%{http_code}" -X POST "${API_URL}chat" \
            -H "Content-Type: application/json" \
            -d '{"message": "Hello, what services does Catholic Charities offer?"}' || echo "000")
          
          if echo "$CHAT_TEST_RESPONSE" | grep -q "200"; then
            echo "‚úÖ Chat API endpoint is working"
          else
            echo "‚ö†Ô∏è Chat API endpoint test failed (may be due to data sync in progress)"
          fi
          
          cd ../Backend
        fi

  post_build:
    commands:
      - echo "=== Deployment Complete ==="
      - |
        if [ "$ACTION" = "deploy" ]; then
          echo "üéâ Full-Stack Deployment Summary:"
          echo "Frontend: Automated deployment triggered via S3 upload"
          echo "Chat API: ${API_URL}chat"
          echo "Health Check: ${API_URL}health"
          echo "Amplify URL: https://main.$AMPLIFY_APP_ID.amplifyapp.com"
          echo ""
          echo "üîç Troubleshooting:"
          echo "1. Check Amplify Console for deployment logs"
          echo "2. Verify build.zip contains index.html with proper script tags"
          echo "3. Check browser console for JavaScript errors"
        fi

artifacts:
  files:
    - '**/*'
  base-directory: 'cdk.out'
