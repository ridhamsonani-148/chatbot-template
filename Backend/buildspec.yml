version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
      python: 3.11
    commands:
      - echo "Installing AWS CDK CLI..."
      - npm install -g aws-cdk@2.161.1
      - cd Backend
      - npm install

  pre_build:
    commands:
      - npm run build
      - cdk bootstrap --require-approval never

  build:
    commands:
      - |
        if [ "$ACTION" = "destroy" ]; then
          cdk destroy CatholicCharitiesStack --force \
            --context githubOwner="$GITHUB_OWNER" \
            --context githubRepo="$GITHUB_REPO" \
            --context githubToken="$GITHUB_TOKEN" \
            --context projectName="$PROJECT_NAME" \
            --context urlFilesPath="$URL_FILES_PATH" \
            --context identityCenterInstanceArn="$IDENTITY_CENTER_INSTANCE_ARN"
        else
          echo "=== PHASE 1: Backend Deployment ==="
          cdk deploy CatholicCharitiesStack --require-approval never \
            --context githubOwner="$GITHUB_OWNER" \
            --context githubRepo="$GITHUB_REPO" \
            --context githubToken="$GITHUB_TOKEN" \
            --context projectName="$PROJECT_NAME" \
            --context urlFilesPath="$URL_FILES_PATH" \
            --context identityCenterInstanceArn="$IDENTITY_CENTER_INSTANCE_ARN" \
            --outputs-file outputs.json
          
          API_URL=$(cat outputs.json | jq -r '.CatholicCharitiesStack.APIGatewayURL // empty')
          FRONTEND_BUILD_BUCKET=$(cat outputs.json | jq -r '.CatholicCharitiesStack.FrontendBuildBucketName // empty')
          
          if [ -z "$API_URL" ] || [ -z "$FRONTEND_BUILD_BUCKET" ]; then
            echo "Error: Could not extract required outputs from CDK deployment"
            exit 1
          fi
          
          echo "=== PHASE 2: Testing API Endpoints ==="
          HEALTH_RESPONSE=$(curl -s -w "%{http_code}" "${API_URL}health" || echo "000")
          if echo "$HEALTH_RESPONSE" | grep -q "200"; then
            echo "‚úÖ API Gateway health check passed"
          else
            echo "‚ö†Ô∏è API Gateway health check failed"
          fi
          
          echo "=== PHASE 3: Triggering Data Source Sync ==="
          DATA_SOURCE_INFO=$(cat outputs.json | jq -r '.CatholicCharitiesStack.DataSourceInfo')
          APPLICATION_ID=$(cat outputs.json | jq -r '.CatholicCharitiesStack.QBusinessApplicationId')
          INDEX_ID=$(cat outputs.json | jq -r '.CatholicCharitiesStack.QBusinessIndexId')
          
          echo "$DATA_SOURCE_INFO" | jq -r '.[] | @base64' | while read -r data_source; do
            DS_ID=$(echo "$data_source" | base64 -d | jq -r '.id')
            DS_NAME=$(echo "$data_source" | base64 -d | jq -r '.name')
            aws qbusiness start-data-source-sync-job \
              --application-id "$APPLICATION_ID" \
              --data-source-id "$DS_ID" \
              --index-id "$INDEX_ID" \
              --region "$CDK_DEFAULT_REGION" || echo "Sync job may already be running for $DS_NAME"
          done
          
          echo "=== PHASE 4: Frontend Build and Deployment ==="
          cd ../Frontend
          echo "REACT_APP_API_BASE_URL=$API_URL" > .env
          echo "REACT_APP_CHAT_ENDPOINT=${API_URL}chat" >> .env
          echo "REACT_APP_HEALTH_ENDPOINT=${API_URL}health" >> .env
          npm ci
          npm run build
          
          echo "Creating/updating Amplify app..."
          AMPLIFY_APP_ID=$(aws amplify create-app \
            --name "${PROJECT_NAME}-frontend" \
            --platform WEB \
            --environment-variables "REACT_APP_API_BASE_URL=$API_URL,REACT_APP_CHAT_ENDPOINT=${API_URL}chat,REACT_APP_HEALTH_ENDPOINT=${API_URL}health" \
            --query 'app.appId' \
            --output text 2>/dev/null || \
            aws amplify list-apps \
            --query "apps[?name=='${PROJECT_NAME}-frontend'].appId" \
            --output text)
          
          aws amplify create-branch \
            --app-id "$AMPLIFY_APP_ID" \
            --branch-name main \
            --stage PRODUCTION \
            --environment-variables "REACT_APP_API_BASE_URL=$API_URL,REACT_APP_CHAT_ENDPOINT=${API_URL}chat,REACT_APP_HEALTH_ENDPOINT=${API_URL}health" \
            --no-cli-pager 2>/dev/null || echo "Branch already exists"
          
          cd build
          zip -r ../build.zip .
          cd ..
          BUILD_KEY="builds/build-$(date +%s).zip"
          aws s3 cp build.zip s3://$FRONTEND_BUILD_BUCKET/$BUILD_KEY
          
          aws amplify start-deployment \
            --app-id "$AMPLIFY_APP_ID" \
            --branch-name main \
            --source-url "s3://$FRONTEND_BUILD_BUCKET/$BUILD_KEY"
          
          echo "=== PHASE 5: Final API Testing ==="
          CHAT_TEST_RESPONSE=$(curl -s -w "%{http_code}" -X POST "${API_URL}chat" \
            -H "Content-Type: application/json" \
            -d '{"message": "Hello, what services does Catholic Charities offer?"}' || echo "000")
          
          if echo "$CHAT_TEST_RESPONSE" | grep -q "200"; then
            echo "‚úÖ Chat API endpoint is working"
          else
            echo "‚ö†Ô∏è Chat API endpoint test failed (may be due to data sync in progress)"
          fi
          
          cd ../Backend
        fi

  post_build:
    commands:
      - echo "=== Deployment Complete ==="
      - |
        if [ "$ACTION" = "deploy" ]; then
          echo "üéâ Full-Stack Deployment Summary:"
          echo "Frontend deployment initiated. Check Amplify Console for status."
          echo "Chat API: ${API_URL}chat"
          echo "Health Check: ${API_URL}health"
          echo "Monitor Q Business data source sync in the Q Business Console."
        fi

artifacts:
  files:
    - '**/*'
  base-directory: 'cdk.out'