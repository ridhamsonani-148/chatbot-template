version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
      python: 3.11
    commands:
      - echo "Installing AWS CDK CLI..."
      - npm install -g aws-cdk@2.161.1
      - cd Backend
      - npm install

  pre_build:
    commands:
      - npm run build
      - cdk bootstrap --require-approval never

  build:
    commands:
      - |
        if [ "$ACTION" = "destroy" ]; then          
          # Clean up Amplify apps for this project
          echo "Cleaning up Amplify apps for project: ${PROJECT_NAME}"
          AMPLIFY_APP_IDS=$(aws amplify list-apps --query "apps[?contains(name, '${AMPLIFY_APP_NAME}')].appId" --output text 2>/dev/null || echo "")
          if [ -n "$AMPLIFY_APP_IDS" ] && [ "$AMPLIFY_APP_IDS" != "None" ]; then
            for APP_ID in $AMPLIFY_APP_IDS; do
              echo "Deleting Amplify app: $APP_ID"
              aws amplify delete-app --app-id "$APP_ID" || echo "Failed to delete Amplify app $APP_ID"
            done
          fi
          
          # Destroy CDK stack
          cdk destroy CatholicCharitiesStack --force \
            --context githubOwner="$GITHUB_OWNER" \
            --context githubRepo="$GITHUB_REPO" \
            --context projectName="$PROJECT_NAME" \
            --context urlFilesPath="$URL_FILES_PATH" \
            --context amplifyAppName="$AMPLIFY_APP_NAME" \
            --context amplifyBranchName="$AMPLIFY_BRANCH_NAME"
        else
          echo "=== PHASE 1: Backend Deployment ==="
          cdk deploy CatholicCharitiesStack --require-approval never \
            --context githubOwner="$GITHUB_OWNER" \
            --context githubRepo="$GITHUB_REPO" \
            --context projectName="$PROJECT_NAME" \
            --context urlFilesPath="$URL_FILES_PATH" \
            --context amplifyAppName="$AMPLIFY_APP_NAME" \
            --context amplifyBranchName="$AMPLIFY_BRANCH_NAME" \
            --outputs-file outputs.json
          
          API_URL=$(cat outputs.json | jq -r '.CatholicCharitiesStack.APIGatewayURL // empty')
          FRONTEND_BUILD_BUCKET=$(cat outputs.json | jq -r '.CatholicCharitiesStack.FrontendBuildBucketName // empty')
          DATA_BUCKET=$(cat outputs.json | jq -r '.CatholicCharitiesStack.S3BucketName // empty')
          WEB_CRAWLER_ROLE_ARN=$(cat outputs.json | jq -r '.CatholicCharitiesStack.WebCrawlerRoleArn // empty')
          APPLICATION_ID=$(cat outputs.json | jq -r '.CatholicCharitiesStack.QBusinessApplicationId // empty')
          INDEX_ID=$(cat outputs.json | jq -r '.CatholicCharitiesStack.QBusinessIndexId // empty')

          AMPLIFY_APP_NAME_FROM_CDK=$(cat outputs.json | jq -r '.CatholicCharitiesStack.AmplifyAppName // empty')
          AMPLIFY_BRANCH_NAME_FROM_CDK=$(cat outputs.json | jq -r '.CatholicCharitiesStack.AmplifyBranchName // empty')

          # Use the values from CDK context (which came from environment variables)
          AMPLIFY_APP_NAME=${AMPLIFY_APP_NAME_FROM_CDK:-$AMPLIFY_APP_NAME}
          AMPLIFY_BRANCH_NAME=${AMPLIFY_BRANCH_NAME_FROM_CDK:-$AMPLIFY_BRANCH_NAME}
          
          if [ -z "$API_URL" ] || [ -z "$FRONTEND_BUILD_BUCKET" ]; then
            echo "Error: Could not extract required outputs from CDK deployment"
            exit 1
          fi
          
          echo "=== PHASE 2: Testing API Endpoints ==="
          HEALTH_RESPONSE=$(curl -s -w "%{http_code}" "${API_URL}health" || echo "000")
          if echo "$HEALTH_RESPONSE" | grep -q "200"; then
            echo "‚úÖ API Gateway health check passed"
          else
            echo "‚ö†Ô∏è API Gateway health check failed"
          fi
          
          echo "=== PHASE 3: Manual Data Source Creation ==="
          # Since we removed the data source creator Lambda, create data sources manually
          cd $URL_FILES_PATH
          for txt_file in *.txt; do
            if [ -f "$txt_file" ]; then
              base_name=$(basename "$txt_file" .txt)
              echo "Creating data source for: $base_name"
              
              # Upload file to S3
              aws s3 cp "$txt_file" "s3://$DATA_BUCKET/$txt_file"
              
              # Read URLs from file
              urls=$(grep -v '^#' "$txt_file" | grep -v '^$' | tr '\n' ',' | sed 's/,$//')
              
              if [ -n "$urls" ]; then
                # Create data source
                aws qbusiness create-data-source \
                  --application-id "$APPLICATION_ID" \
                  --index-id "$INDEX_ID" \
                  --display-name "${PROJECT_NAME}-${base_name}" \
                  --description "Web crawler for ${base_name} URLs" \
                  --role-arn "$WEB_CRAWLER_ROLE_ARN" \
                  --configuration '{
                    "type": "WEBCRAWLERV2",
                    "syncMode": "FORCED_FULL_CRAWL",
                    "connectionConfiguration": {
                      "repositoryEndpointMetadata": {
                        "authentication": "NoAuthentication",
                        "seedUrlConnections": [{"seedUrl": "'$(echo $urls | sed 's/,/"},{"seedUrl": "/g')'"}]
                      }
                    },
                    "repositoryConfigurations": {
                      "webPage": {
                        "fieldMappings": [
                          {
                            "indexFieldName": "_source_uri",
                            "indexFieldType": "STRING",
                            "dataSourceFieldName": "sourceUrl"
                          },
                          {
                            "indexFieldName": "_document_title",
                            "indexFieldType": "STRING",
                            "dataSourceFieldName": "title"
                          }
                        ]
                      }
                    },
                    "additionalProperties": {
                      "rateLimit": "300",
                      "maxFileSize": "50",
                      "crawlDepth": "2",
                      "maxLinksPerUrl": "100",
                      "crawlSubDomain": true,
                      "crawlAllDomain": false,
                      "honorRobots": true,
                      "crawlAttachments": false
                    }
                  }' \
                  --region "$CDK_DEFAULT_REGION" || echo "Failed to create data source for $base_name"
              fi
            fi
          done
          cd ../Backend
          
          echo "=== PHASE 4: Amplify App Setup ==="
          echo "Creating new Amplify app: $AMPLIFY_APP_NAME"
          
          AMPLIFY_APP_ID=$(aws amplify create-app \
            --name "$AMPLIFY_APP_NAME" \
            --platform WEB \
            --environment-variables "REACT_APP_API_BASE_URL=$API_URL,REACT_APP_CHAT_ENDPOINT=${API_URL}chat,REACT_APP_HEALTH_ENDPOINT=${API_URL}health" \
            --custom-rules '[{"source":"/<*>","target":"/index.html","status":"200"}]' \
            --query 'app.appId' \
            --output text)

          if [ -z "$AMPLIFY_APP_ID" ] || [ "$AMPLIFY_APP_ID" = "None" ]; then
            echo "‚ùå Failed to create Amplify app"
            exit 1
          fi

          echo "‚úÖ Created new Amplify app with ID: $AMPLIFY_APP_ID"

          # Create branch
          echo "Creating branch: $AMPLIFY_BRANCH_NAME"
          aws amplify create-branch \
            --app-id "$AMPLIFY_APP_ID" \
            --branch-name "$AMPLIFY_BRANCH_NAME" \
            --stage PRODUCTION \
            --environment-variables "REACT_APP_API_BASE_URL=$API_URL,REACT_APP_CHAT_ENDPOINT=${API_URL}chat,REACT_APP_HEALTH_ENDPOINT=${API_URL}health" \
            --no-cli-pager

          # Update Lambda function with Amplify App ID and Branch Name
          aws lambda update-function-configuration \
            --function-name "$(cat outputs.json | jq -r '.CatholicCharitiesStack.AmplifyDeployerFunctionName')" \
            --environment "Variables={AMPLIFY_APP_ID=$AMPLIFY_APP_ID,AMPLIFY_BRANCH_NAME=$AMPLIFY_BRANCH_NAME,AMPLIFY_APP_NAME=$AMPLIFY_APP_NAME}"
          
          echo "=== PHASE 5: Frontend Build and Automated Deployment ==="
          cd ../Frontend
          
          export PUBLIC_URL=""
          export GENERATE_SOURCEMAP=false
          
          echo "REACT_APP_API_BASE_URL=$API_URL" > .env.production
          echo "REACT_APP_CHAT_ENDPOINT=${API_URL}chat" >> .env.production
          echo "REACT_APP_HEALTH_ENDPOINT=${API_URL}health" >> .env.production
          echo "PUBLIC_URL=" >> .env.production
          echo "GENERATE_SOURCEMAP=false" >> .env.production
          
          rm -rf build/ node_modules/.cache/
          npm ci --production=false
          npm run build
          
          if [ ! -f "build/index.html" ]; then
            echo "‚ùå ERROR: Build failed - index.html not found!"
            exit 1
          fi
          
          if grep -q "%PUBLIC_URL%" build/index.html; then
            echo "‚ùå ERROR: Build incomplete - %PUBLIC_URL% not replaced!"
            exit 1
          fi
          
          echo "‚úÖ Build successful"
          
          cd build
          zip -r ../build.zip . -x "*.DS_Store" "*.map"
          cd ..
          
          BUILD_KEY="builds/build-$(date +%s).zip"
          aws s3 cp build.zip s3://$FRONTEND_BUILD_BUCKET/$BUILD_KEY
          
          echo "‚úÖ Build artifact uploaded to S3: $BUILD_KEY"
          echo "üöÄ Automated deployment will start via EventBridge trigger"
          echo "üì± Amplify App URL: https://$AMPLIFY_BRANCH_NAME.$AMPLIFY_APP_ID.amplifyapp.com"
          
          echo "$AMPLIFY_APP_ID" > ../amplify_app_id.txt
          echo "$AMPLIFY_APP_NAME" > ../amplify_app_name.txt
          
          cd ../Backend
        fi

  post_build:
    commands:
      - echo "=== Deployment Complete ==="
      - |
        if [ "$ACTION" = "deploy" ]; then
          AMPLIFY_APP_ID=$(cat ../amplify_app_id.txt 2>/dev/null || echo "")
          AMPLIFY_APP_NAME=$(cat ../amplify_app_name.txt 2>/dev/null || echo "")
          echo "üéâ Optimized Deployment Summary:"
          echo "‚úÖ Backend: Deployed via CloudFormation (2 Lambda functions only)"
          echo "‚úÖ Amplify App: $AMPLIFY_APP_NAME created via CLI"
          echo "‚úÖ Frontend: Automated deployment triggered via S3 upload"
          echo ""
          echo "üîó URLs:"
          echo "Chat API: ${API_URL}chat"
          echo "Health Check: ${API_URL}health"
          if [ -n "$AMPLIFY_APP_ID" ]; then
            echo "Amplify URL: https://$AMPLIFY_BRANCH_NAME.$AMPLIFY_APP_ID.amplifyapp.com"
          fi
          echo ""
          echo "üìä Monitor:"
          echo "- Q Business data sync in Q Business Console"
          echo "- Amplify deployment in Amplify Console"
        fi

artifacts:
  files:
    - '**/*'
  base-directory: 'cdk.out'
